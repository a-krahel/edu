var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.261,1,1.796]],["body/controllers/AppController.html",[0,1.972,1,2.808,2,1.57,3,0.624,4,0.624,5,0.542,6,3.003,7,0.542,8,1.585,9,4.324,10,1.757,11,0.042,12,0.804,13,3.67,14,1.262,15,1.767,16,0.892,17,0.904,18,2.412,19,3.003,20,0.624,21,0.197,22,3.003,23,2.237,24,1.57,25,3.67,26,0.033,27,0.033]],["title/modules/AppModule.html",[28,1.411,29,1.796]],["body/modules/AppModule.html",[1,2.266,2,1.326,3,0.351,4,0.351,5,0.305,8,0.711,11,0.043,12,0.453,14,0.711,16,1.066,17,0.509,18,2.224,19,1.691,20,0.351,21,0.111,26,0.022,27,0.022,28,1.484,29,3.145,30,0.989,31,1.484,32,1.691,33,1.691,34,1.691,35,2.224,36,2.5,37,1.889,38,1.259,39,1.259,40,2.066,41,2.165,42,2.165,43,2.066,44,3.098,45,4.13,46,2.066,47,0.884,48,0.884,49,0.57,50,0.884,51,3.098,52,1.691,53,1.691,54,3.098,55,2.066,56,2.066,57,1.691,58,1.889,59,0.989,60,1.444,61,0.884,62,2.536,63,3.717,64,2.066,65,2.066,66,1.889,67,1.259,68,1.259,69,2.066,70,1.112,71,2.066,72,1.583,73,2.066,74,1.691,75,1.668,76,2.066,77,1.188,78,1.691,79,2.066,80,2.066,81,2.066,82,1.444,83,2.066,84,2.066,85,2.066,86,2.066,87,2.066,88,2.066,89,1.444,90,2.066,91,2.066,92,2.066,93,2.066,94,2.066,95,2.066,96,2.066,97,2.066,98,2.066,99,2.066,100,1.259,101,2.066,102,1.691,103,2.066,104,2.066,105,2.066,106,1.691,107,2.066,108,2.066,109,3.042,110,3.717,111,3.717,112,2.066,113,0.884,114,1.259,115,2.066]],["title/injectables/AppService.html",[18,1.411,116,0.814]],["body/injectables/AppService.html",[3,0.655,4,0.655,5,0.57,7,0.57,8,1.634,9,4.4,11,0.042,12,0.845,14,1.326,15,1.822,16,0.747,17,0.95,18,2.275,20,0.655,21,0.207,24,1.65,26,0.034,27,0.034,116,1.312,117,1.847,118,3.156,119,3.857,120,3.857,121,3.857]],["title/injectables/IsActiveMiddleware.html",[68,1.796,116,0.814]],["body/injectables/IsActiveMiddleware.html",[3,0.445,4,0.445,5,0.387,7,0.387,8,1.266,11,0.042,12,0.806,14,0.901,16,0.894,17,0.645,20,0.445,21,0.14,26,0.026,27,0.026,47,1.575,48,1.575,49,1.016,50,1.575,58,3.158,59,1.254,68,2.243,106,2.144,113,1.575,116,1.016,117,1.254,122,2.144,123,2.594,124,3.681,125,1.981,126,2.619,127,2.415,128,2.619,129,3.681,130,3.98,131,4.256,132,4.616,133,4.616,134,4.616,135,2.619,136,2.144,137,3.681,138,1.83,139,2.144,140,2.144,141,1.981,142,2.619,143,2.572,144,3.681,145,1.83,146,2.619,147,2.243,148,1.981,149,2.243,150,2.619,151,2.619,152,1.254,153,2.619,154,2.619,155,1.83,156,2.619,157,2.619,158,2.619,159,1.596,160,2.619,161,2.619]],["title/injectables/JwtStrategy.html",[116,0.814,127,1.411]],["body/injectables/JwtStrategy.html",[3,0.49,4,0.49,5,0.426,7,0.426,8,1.353,11,0.043,12,0.861,14,0.991,16,1.006,17,0.71,20,0.49,21,0.154,23,1.757,24,1.233,26,0.028,27,0.028,47,1.683,48,1.683,50,1.683,61,1.233,66,1.757,67,1.757,72,1.508,113,1.233,116,1.085,117,1.38,123,2.729,125,2.117,127,1.883,138,2.748,141,1.551,143,2.014,147,1.757,148,1.551,149,1.757,152,2.144,162,2.359,163,3.933,164,2.359,165,2.882,166,3.219,167,3.933,168,2.882,169,2.882,170,2.014,171,2.882,172,1.551,173,2.014,174,2.882,175,2.882,176,2.359,177,1.757,178,2.014,179,2.014,180,2.882,181,2.359,182,2.014,183,2.882,184,2.882,185,2.882,186,2.882,187,2.882,188,2.359,189,2.882]],["title/classes/UserDataDto.html",[21,0.158,190,1.586]],["body/classes/UserDataDto.html",[3,0.48,4,0.48,5,0.417,7,0.417,10,1.857,11,0.042,12,0.849,15,1.828,16,0.547,20,0.48,21,0.208,26,0.028,27,0.028,49,1.07,100,3.046,159,3.046,190,2.087,191,1.519,192,3.625,193,2.311,194,1.857,195,2.823,196,5.387,197,5.163,198,3.878,199,4.768,200,4.768,201,4.768,202,4.768,203,2.823,204,3.878,205,3.878,206,3.878,207,3.174,208,3.878,209,3.878,210,3.878,211,3.878,212,4.768,213,3.878,214,2.71,215,2.823,216,3.878,217,2.311]],["title/classes/Users.html",[21,0.158,72,1.13]],["body/classes/Users.html",[3,0.363,4,0.363,5,0.315,7,0.315,10,2.395,11,0.042,12,1.096,15,1.918,16,0.615,20,0.363,21,0.114,26,0.023,27,0.023,49,1.436,72,1.453,77,1.609,78,1.748,82,2.219,100,2.31,152,1.815,159,2.31,179,2.219,191,1.149,194,1.52,218,1.492,219,3.102,220,3.102,221,3.791,222,3.102,223,3.102,224,3.102,225,3.791,226,4.32,227,2.135,228,2.259,229,3.848,230,4.461,231,4.094,232,3.435,233,2.135,234,3.175,235,2.135,236,2.135,237,3.175,238,2.135,239,2.135,240,2.135,241,3.102,242,2.135,243,2.135,244,2.135,245,2.219,246,1.149,247,1.301,248,2.135,249,2.599,250,1.748,251,3.848,252,2.135,253,2.135,254,1.935,255,2.135,256,1.748]],["title/controllers/UsersController.html",[0,1.261,70,1.586]],["body/controllers/UsersController.html",[0,1.033,2,1.033,3,0.41,4,0.41,5,0.357,7,0.357,8,1.195,10,2.257,11,0.043,12,1.033,14,1.621,15,1.56,16,0.862,17,0.595,20,0.41,21,0.129,22,1.976,23,1.471,24,2.018,26,0.025,27,0.025,47,1.904,48,1.904,49,1.123,50,1.904,70,1.869,72,0.926,145,2.427,148,1.869,155,2.427,172,1.299,190,2.723,257,1.976,258,1.976,259,2.843,260,3.473,261,4.45,262,1.976,263,3.473,264,2.414,265,2.843,266,2.414,267,2.843,268,2.414,269,3.473,270,2.414,271,2.414,272,2.414,273,2.414,274,2.414,275,2.414,276,3.473,277,2.414,278,3.473,279,1.976,280,1.687,281,1.976,282,1.976,283,1.976,284,1.976,285,1.663,286,1.976,287,2.414,288,2.414,289,2.843,290,2.414,291,2.414,292,2.414,293,2.414,294,2.414,295,2.414,296,2.414,297,2.414,298,2.414,299,2.414]],["title/modules/UsersModule.html",[28,1.411,35,1.411]],["body/modules/UsersModule.html",[2,1.652,3,0.476,4,0.476,5,0.414,11,0.043,16,1.057,17,0.691,20,0.476,21,0.15,26,0.028,27,0.028,28,1.848,30,1.343,31,1.848,35,2.644,37,2.353,38,1.709,39,1.709,41,2.697,42,1.96,59,1.343,60,1.96,61,1.2,66,1.709,67,1.709,70,2.375,72,1.075,127,2.693,140,2.295,172,1.509,177,1.709,178,1.96,285,2.693,286,2.295,300,2.295,301,2.295,302,2.295,303,2.804,304,3.86,305,2.804,306,3.86,307,2.804,308,2.804,309,2.804,310,2.804,311,2.804]],["title/injectables/UsersService.html",[116,0.814,285,1.411]],["body/injectables/UsersService.html",[3,0.261,4,0.261,5,0.227,7,0.227,8,0.847,11,0.043,12,0.901,14,1.326,15,1.181,16,0.897,17,0.379,20,0.261,21,0.082,23,0.936,24,1.318,26,0.018,27,0.018,47,1.65,48,1.65,49,0.972,50,1.65,58,2.633,59,0.736,61,0.657,62,2.015,66,0.936,67,0.936,72,0.944,82,1.074,100,2.349,113,1.76,116,0.679,117,0.736,123,3.012,125,1.325,138,1.72,141,1.325,143,2.152,145,1.72,147,2.958,148,1.658,149,2.633,152,1.687,155,1.72,159,2.823,164,1.257,166,2.015,170,1.72,173,1.074,178,1.074,181,1.257,182,1.074,188,2.521,190,2.612,207,1.257,220,3.155,222,2.521,223,1.257,224,1.257,228,0.827,254,0.936,256,1.257,259,2.015,262,2.015,265,3.155,283,1.257,284,1.257,285,1.179,312,1.257,313,3.522,314,2.462,315,1.536,316,1.536,317,2.462,318,1.536,319,1.536,320,2.462,321,1.536,322,2.015,323,2.462,324,1.536,325,1.257,326,1.257,327,3.08,328,1.536,329,1.72,330,1.536,331,2.462,332,1.536,333,1.536,334,1.536,335,2.462,336,1.536,337,1.536,338,2.462,339,1.536,340,1.536,341,1.536,342,1.536,343,1.536,344,1.536,345,2.462,346,2.462,347,1.536,348,1.536,349,1.536,350,3.08,351,1.536,352,1.536,353,2.462,354,2.462,355,2.462,356,1.536,357,1.536,358,1.536,359,1.536]],["title/classes/Weather.html",[21,0.158,77,1.13]],["body/classes/Weather.html",[3,0.429,4,0.429,5,0.373,7,0.373,10,2.454,11,0.042,12,1.123,15,1.741,16,0.489,20,0.429,21,0.135,26,0.026,27,0.026,49,1.415,77,1.599,179,2.506,191,1.358,194,1.717,214,3.661,219,3.413,226,4.362,228,2.581,229,4.078,230,4.519,231,2.935,232,2.066,245,2.506,246,1.358,247,1.538,250,2.066,251,4.078,254,1.538,360,2.066,361,3.413,362,2.542,363,2.914,364,2.914,365,2.914,366,2.914,367,2.524,368,2.524,369,2.524,370,2.524,371,2.524,372,2.524,373,2.524]],["title/controllers/WeatherController.html",[0,1.261,75,1.586]],["body/controllers/WeatherController.html",[0,0.966,2,0.966,3,0.383,4,0.383,5,0.333,7,0.333,8,1.138,10,2.198,11,0.043,12,1.005,14,1.579,16,0.929,17,0.556,20,0.383,21,0.121,24,1.964,26,0.024,27,0.024,47,1.676,48,1.676,49,0.623,50,1.676,75,1.78,77,0.865,113,1.416,114,2.016,125,1.215,130,3.757,136,2.707,141,1.78,172,1.215,258,1.847,267,2.312,279,1.847,280,1.577,281,1.847,282,1.847,289,3.529,362,2.016,374,1.847,375,2.707,376,3.529,377,3.529,378,2.707,379,2.707,380,1.847,381,2.581,382,2.257,383,2.257,384,3.308,385,2.257,386,2.257,387,2.257,388,1.847,389,2.257,390,2.257,391,2.257,392,2.257,393,2.257,394,1.847,395,1.577,396,2.312,397,2.257,398,2.257,399,1.847,400,2.257,401,2.736,402,1.847,403,1.875,404,1.847,405,2.257,406,2.257,407,1.847,408,1.847,409,3.308,410,2.257,411,1.847,412,1.847,413,2.257,414,2.257,415,2.257,416,2.257,417,2.257,418,2.257,419,2.257,420,2.257,421,2.257,422,2.257]],["title/classes/WeatherDto.html",[21,0.158,381,1.586]],["body/classes/WeatherDto.html",[3,0.568,4,0.568,5,0.494,7,0.494,11,0.041,12,1.187,15,1.665,20,0.568,21,0.179,26,0.031,27,0.031,49,1.496,191,1.8,194,2.08,214,3.91,228,2.847,362,2.939,363,3.37,364,3.37,365,3.37,366,3.37,381,2.337,423,2.738,424,3.345,425,3.345,426,3.345,427,3.345,428,3.345,429,3.345]],["title/modules/WeatherModule.html",[28,1.411,36,1.586]],["body/modules/WeatherModule.html",[2,1.78,3,0.532,4,0.532,5,0.462,11,0.042,16,1.052,17,0.771,20,0.532,21,0.168,26,0.03,27,0.03,28,1.991,30,1.499,31,1.991,35,2.549,36,2.969,37,2.535,38,1.909,39,1.909,41,2.906,42,2.906,53,2.563,58,2.535,59,1.499,60,2.188,61,1.34,74,2.563,75,2.513,77,1.201,403,2.549,404,2.563,430,2.563,431,2.563,432,3.131,433,3.131,434,3.131,435,2.563,436,3.131]],["title/injectables/WeatherService.html",[116,0.814,403,1.411]],["body/injectables/WeatherService.html",[3,0.256,4,0.256,5,0.223,7,0.223,8,0.834,11,0.043,12,0.836,14,1.475,16,0.863,17,0.372,20,0.256,21,0.081,24,1.492,26,0.017,27,0.017,47,1.302,48,1.302,49,0.416,50,1.302,52,1.985,61,0.646,77,1.811,109,2.853,114,2.614,116,0.67,117,0.722,123,2.487,125,0.812,141,1.305,147,2.614,148,2.79,149,2.487,152,2.311,170,1.695,173,1.054,182,1.054,228,1.876,246,0.812,254,0.919,280,1.695,322,2.853,325,1.235,326,1.235,361,1.985,362,2.124,363,2.851,364,2.436,365,2.436,366,2.669,375,1.985,376,2.853,377,2.853,378,1.985,379,1.985,380,1.985,381,2.196,388,1.985,394,1.235,395,1.054,396,1.695,399,1.235,401,2.126,402,1.235,403,1.161,407,1.235,408,1.235,411,1.235,412,1.235,435,1.235,437,1.235,438,1.508,439,2.426,440,3.485,441,3.485,442,4.46,443,3.042,444,3.042,445,1.695,446,3.485,447,1.508,448,1.508,449,1.508,450,2.426,451,1.508,452,2.426,453,3.042,454,1.508,455,1.508,456,1.508,457,1.508,458,3.042,459,2.426,460,1.235,461,1.508,462,2.426,463,1.508,464,2.426,465,1.508,466,2.126,467,1.508,468,1.508,469,2.426,470,1.508,471,1.508,472,1.508,473,3.042,474,1.508,475,3.485,476,1.508,477,1.508]],["title/coverage.html",[478,2.791]],["body/coverage.html",[0,1.965,1,1.846,5,0.447,6,2.479,11,0.042,18,1.45,21,0.263,26,0.029,27,0.029,49,0.836,68,1.846,70,1.63,72,1.161,75,1.63,77,1.161,89,2.117,113,1.296,116,1.413,118,2.479,122,2.479,127,1.45,162,2.479,190,1.63,192,2.479,193,2.479,218,2.117,245,2.117,257,2.479,285,1.45,312,2.479,360,2.479,374,2.479,381,1.63,403,1.45,423,2.479,437,2.479,478,2.117,479,3.029,480,3.029,481,3.029,482,5.73,483,4.067,484,2.479,485,3.029,486,4.067,487,2.479,488,3.029,489,2.479,490,4.592,491,4.067,492,3.029,493,4.067,494,3.029,495,3.029,496,3.029,497,3.029]],["title/dependencies.html",[31,1.693,498,2.026]],["body/dependencies.html",[11,0.043,17,0.789,21,0.226,26,0.03,27,0.03,31,1.534,57,2.622,59,1.534,61,1.371,139,2.622,172,1.724,176,3.455,177,2.573,217,2.622,246,2.272,247,1.953,329,2.239,395,2.239,396,2.95,401,2.239,499,3.204,500,5.02,501,3.204,502,3.204,503,3.204,504,3.204,505,3.204,506,3.204,507,3.204,508,3.204,509,3.204,510,3.204,511,3.204,512,3.204,513,3.204,514,3.204,515,3.204,516,3.204,517,3.204,518,3.204,519,3.204,520,3.204,521,3.204,522,3.204,523,3.204,524,3.204,525,3.204,526,3.204,527,3.204,528,3.204,529,3.204]],["title/miscellaneous/enumerations.html",[530,1.185,531,2.895]],["body/miscellaneous/enumerations.html",[7,0.628,11,0.04,26,0.036,27,0.036,152,2.413,218,2.97,241,4.125,249,4.125,466,3.522,530,2.035,531,3.479,532,4.251]],["title/miscellaneous/functions.html",[530,1.185,533,2.895]],["body/miscellaneous/functions.html",[7,0.651,11,0.037,26,0.037,27,0.037,487,3.608,489,4.464,530,2.111,533,3.608,534,4.408]],["title/index.html",[7,0.366,535,2.476,536,2.476]],["body/index.html",[11,0.042,26,0.03,27,0.03,102,2.642,113,1.382,114,1.968,177,1.968,246,1.738,247,1.968,267,2.256,329,2.256,445,2.256,478,2.256,537,3.229,538,3.229,539,3.229,540,3.229,541,3.229,542,5.369,543,3.229,544,3.229,545,3.229,546,3.229,547,3.229,548,3.229,549,3.229,550,5.23,551,3.229,552,3.229,553,3.229,554,3.229,555,3.229,556,4.244,557,4.244,558,3.229,559,3.229,560,3.229,561,3.229,562,3.229,563,3.229,564,3.229,565,3.229,566,3.229,567,3.229,568,3.229,569,3.229,570,3.229,571,3.229,572,3.229,573,3.229,574,4.244,575,3.229,576,3.229,577,3.229,578,3.229,579,3.229]],["title/modules.html",[30,1.912]],["body/modules.html",[11,0.036,26,0.036,27,0.036,29,2.578,30,2.025,35,2.025,36,2.276,580,5.361,581,5.361,582,5.361,583,5.361]],["title/overview.html",[584,3.268]],["body/overview.html",[2,1.382,11,0.041,18,2.27,26,0.03,27,0.03,29,3.385,30,1.546,31,2.032,32,2.642,33,2.642,34,2.642,35,2.715,36,2.945,37,2.586,38,1.968,39,1.968,117,1.546,127,2.62,191,1.738,285,2.62,300,2.642,301,2.642,302,2.642,403,2.27,430,2.642,431,2.642,460,2.642,584,2.642,585,4.244,586,3.229]],["title/properties.html",[194,1.693,498,2.026]],["body/properties.html",[11,0.041,26,0.037,27,0.037,194,2.078,445,3.032,587,4.339,588,4.339,589,4.339,590,4.339,591,4.339]],["title/miscellaneous/variables.html",[530,1.185,592,2.895]],["body/miscellaneous/variables.html",[7,0.641,11,0.039,26,0.037,27,0.037,89,3.565,466,3.032,484,3.551,530,2.078,592,3.551,593,4.339,594,4.339,595,4.339]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/IsActiveMiddleware.html":{},"injectables/JwtStrategy.html":{},"classes/UserDataDto.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/Weather.html":{},"controllers/WeatherController.html":{},"classes/WeatherDto.html":{},"modules/WeatherModule.html":{},"injectables/WeatherService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":482,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":588,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":525,"title":{},"body":{"dependencies.html":{}}}],["0.14.0",{"_index":512,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":511,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":519,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":486,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":483,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":490,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":491,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":493,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":494,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":492,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":444,"title":{},"body":{"injectables/WeatherService.html":{}}}],["1.0.0",{"_index":499,"title":{},"body":{"dependencies.html":{}}}],["1.0.1",{"_index":514,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":503,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":574,"title":{},"body":{"index.html":{}}}],["1000",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["10000",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["1000000",{"_index":475,"title":{},"body":{"injectables/WeatherService.html":{}}}],["15",{"_index":461,"title":{},"body":{"injectables/WeatherService.html":{}}}],["16.0.3",{"_index":516,"title":{},"body":{"dependencies.html":{}}}],["181",{"_index":476,"title":{},"body":{"injectables/WeatherService.html":{}}}],["2.1.5",{"_index":529,"title":{},"body":{"dependencies.html":{}}}],["2.3.1",{"_index":501,"title":{},"body":{"dependencies.html":{}}}],["2/6",{"_index":496,"title":{},"body":{"coverage.html":{}}}],["3",{"_index":585,"title":{},"body":{"overview.html":{}}}],["3.0.8",{"_index":507,"title":{},"body":{"dependencies.html":{}}}],["3.2.0",{"_index":518,"title":{},"body":{"dependencies.html":{}}}],["33",{"_index":495,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":586,"title":{},"body":{"overview.html":{}}}],["4.0.1",{"_index":520,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":460,"title":{},"body":{"injectables/WeatherService.html":{},"overview.html":{}}}],["5.1.0",{"_index":508,"title":{},"body":{"dependencies.html":{}}}],["5.2.0",{"_index":509,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":477,"title":{},"body":{"injectables/WeatherService.html":{}}}],["6",{"_index":472,"title":{},"body":{"injectables/WeatherService.html":{}}}],["6.29.3",{"_index":528,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":527,"title":{},"body":{"dependencies.html":{}}}],["8.10.0",{"_index":522,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":199,"title":{},"body":{"classes/UserDataDto.html":{}}}],["9.!#$%&'*+/=?^_",{"_index":198,"title":{},"body":{"classes/UserDataDto.html":{}}}],["9.0.0",{"_index":500,"title":{},"body":{"dependencies.html":{}}}],["9.0.3",{"_index":504,"title":{},"body":{"dependencies.html":{}}}],["91",{"_index":474,"title":{},"body":{"injectables/WeatherService.html":{}}}],["abc",{"_index":463,"title":{},"body":{"injectables/WeatherService.html":{}}}],["access",{"_index":157,"title":{},"body":{"injectables/IsActiveMiddleware.html":{}}}],["accesstoken",{"_index":346,"title":{},"body":{"injectables/UsersService.html":{}}}],["account",{"_index":156,"title":{},"body":{"injectables/IsActiveMiddleware.html":{}}}],["activate",{"_index":155,"title":{},"body":{"injectables/IsActiveMiddleware.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["activate(@param('code",{"_index":298,"title":{},"body":{"controllers/UsersController.html":{}}}],["activate(code",{"_index":262,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["activation",{"_index":359,"title":{},"body":{"injectables/UsersService.html":{}}}],["add",{"_index":439,"title":{},"body":{"injectables/WeatherService.html":{}}}],["additionaltext",{"_index":361,"title":{},"body":{"classes/Weather.html":{},"injectables/WeatherService.html":{}}}],["addweather",{"_index":375,"title":{},"body":{"controllers/WeatherController.html":{},"injectables/WeatherService.html":{}}}],["addweather(@body",{"_index":419,"title":{},"body":{"controllers/WeatherController.html":{}}}],["addweather(weatherdto",{"_index":380,"title":{},"body":{"controllers/WeatherController.html":{},"injectables/WeatherService.html":{}}}],["admin",{"_index":249,"title":{},"body":{"classes/Users.html":{},"miscellaneous/enumerations.html":{}}}],["again",{"_index":351,"title":{},"body":{"injectables/UsersService.html":{}}}],["allownull",{"_index":251,"title":{},"body":{"classes/Users.html":{},"classes/Weather.html":{}}}],["app",{"_index":548,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["apply(isactivemiddleware",{"_index":107,"title":{},"body":{"modules/AppModule.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["async",{"_index":123,"title":{},"body":{"injectables/IsActiveMiddleware.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{},"injectables/WeatherService.html":{}}}],["authguard",{"_index":282,"title":{},"body":{"controllers/UsersController.html":{},"controllers/WeatherController.html":{}}}],["author",{"_index":591,"title":{},"body":{"properties.html":{}}}],["authorization",{"_index":169,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["authorization['id",{"_index":189,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["await",{"_index":149,"title":{},"body":{"injectables/IsActiveMiddleware.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{},"injectables/WeatherService.html":{}}}],["bcrypt",{"_index":329,"title":{},"body":{"injectables/UsersService.html":{},"dependencies.html":{},"index.html":{}}}],["bcrypt.compare(password",{"_index":343,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypt.hash",{"_index":332,"title":{},"body":{"injectables/UsersService.html":{}}}],["before",{"_index":146,"title":{},"body":{"injectables/IsActiveMiddleware.html":{}}}],["body",{"_index":279,"title":{},"body":{"controllers/UsersController.html":{},"controllers/WeatherController.html":{}}}],["boolean",{"_index":237,"title":{},"body":{"classes/Users.html":{}}}],["bootstrap",{"_index":489,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":583,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":580,"title":{},"body":{"modules.html":{}}}],["cache",{"_index":401,"title":{},"body":{"controllers/WeatherController.html":{},"injectables/WeatherService.html":{},"dependencies.html":{}}}],["cache_manager",{"_index":394,"title":{},"body":{"controllers/WeatherController.html":{},"injectables/WeatherService.html":{}}}],["cacheinterceptor",{"_index":397,"title":{},"body":{"controllers/WeatherController.html":{}}}],["cachemanager",{"_index":408,"title":{},"body":{"controllers/WeatherController.html":{},"injectables/WeatherService.html":{}}}],["cachemodule",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/WeatherModule.html":{}}}],["cachemodule.register",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["caching",{"_index":412,"title":{},"body":{"controllers/WeatherController.html":{},"injectables/WeatherService.html":{}}}],["catch",{"_index":340,"title":{},"body":{"injectables/UsersService.html":{}}}],["characters",{"_index":211,"title":{},"body":{"classes/UserDataDto.html":{}}}],["city",{"_index":362,"title":{},"body":{"classes/Weather.html":{},"controllers/WeatherController.html":{},"classes/WeatherDto.html":{},"injectables/WeatherService.html":{}}}],["class",{"_index":21,"title":{"classes/UserDataDto.html":{},"classes/Users.html":{},"classes/Weather.html":{},"classes/WeatherDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/IsActiveMiddleware.html":{},"injectables/JwtStrategy.html":{},"classes/UserDataDto.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/Weather.html":{},"controllers/WeatherController.html":{},"classes/WeatherDto.html":{},"modules/WeatherModule.html":{},"injectables/WeatherService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":191,"title":{},"body":{"classes/UserDataDto.html":{},"classes/Users.html":{},"classes/Weather.html":{},"classes/WeatherDto.html":{},"overview.html":{}}}],["classserializerinterceptor",{"_index":398,"title":{},"body":{"controllers/WeatherController.html":{}}}],["cli",{"_index":546,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":300,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":301,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":302,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_weathermodule",{"_index":430,"title":{},"body":{"modules/WeatherModule.html":{},"overview.html":{}}}],["cluster_weathermodule_imports",{"_index":432,"title":{},"body":{"modules/WeatherModule.html":{}}}],["cluster_weathermodule_providers",{"_index":431,"title":{},"body":{"modules/WeatherModule.html":{},"overview.html":{}}}],["code",{"_index":265,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["column",{"_index":226,"title":{},"body":{"classes/Users.html":{},"classes/Weather.html":{}}}],["column({allownull",{"_index":229,"title":{},"body":{"classes/Users.html":{},"classes/Weather.html":{}}}],["config/app",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtStrategy.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["configmodule",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule.forroot",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["configuration",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtStrategy.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["configuration().jwt",{"_index":349,"title":{},"body":{"injectables/UsersService.html":{}}}],["configuration().jwt.secret",{"_index":187,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configure",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["configure(consumer",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["confirmation",{"_index":352,"title":{},"body":{"injectables/UsersService.html":{}}}],["confirmationcode",{"_index":220,"title":{},"body":{"classes/Users.html":{},"injectables/UsersService.html":{}}}],["console.error(e.message",{"_index":342,"title":{},"body":{"injectables/UsersService.html":{}}}],["const",{"_index":147,"title":{},"body":{"injectables/IsActiveMiddleware.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{},"injectables/WeatherService.html":{}}}],["constructor",{"_index":125,"title":{},"body":{"injectables/IsActiveMiddleware.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{},"controllers/WeatherController.html":{},"injectables/WeatherService.html":{}}}],["constructor(jwtstrategy",{"_index":126,"title":{},"body":{"injectables/IsActiveMiddleware.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/UsersController.html":{}}}],["constructor(usersmodel",{"_index":164,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["consumer",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/UsersController.html":{},"controllers/WeatherController.html":{}},"body":{"controllers/AppController.html":{},"controllers/UsersController.html":{},"controllers/WeatherController.html":{},"coverage.html":{}}}],["controller('users",{"_index":287,"title":{},"body":{"controllers/UsersController.html":{}}}],["controller('weather",{"_index":405,"title":{},"body":{"controllers/WeatherController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"controllers/WeatherController.html":{},"modules/WeatherModule.html":{},"overview.html":{}}}],["coverage",{"_index":478,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["createdat",{"_index":221,"title":{},"body":{"classes/Users.html":{}}}],["createdby",{"_index":363,"title":{},"body":{"classes/Weather.html":{},"classes/WeatherDto.html":{},"injectables/WeatherService.html":{}}}],["createuser",{"_index":259,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["createuser(@body",{"_index":294,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuser(createuserdto",{"_index":266,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuser(userdatadto",{"_index":317,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto",{"_index":269,"title":{},"body":{"controllers/UsersController.html":{}}}],["crypto",{"_index":513,"title":{},"body":{"dependencies.html":{}}}],["current",{"_index":440,"title":{},"body":{"injectables/WeatherService.html":{}}}],["currentdate",{"_index":354,"title":{},"body":{"injectables/UsersService.html":{}}}],["dafault",{"_index":561,"title":{},"body":{"index.html":{}}}],["data",{"_index":114,"title":{},"body":{"modules/AppModule.html":{},"controllers/WeatherController.html":{},"injectables/WeatherService.html":{},"index.html":{}}}],["data.dto",{"_index":284,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["data.dto.ts",{"_index":193,"title":{},"body":{"classes/UserDataDto.html":{},"coverage.html":{}}}],["data.dto.ts:14",{"_index":215,"title":{},"body":{"classes/UserDataDto.html":{}}}],["data.dto.ts:8",{"_index":203,"title":{},"body":{"classes/UserDataDto.html":{}}}],["database",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["datatype",{"_index":243,"title":{},"body":{"classes/Users.html":{}}}],["datatype.enum(...object.values(userrole",{"_index":253,"title":{},"body":{"classes/Users.html":{}}}],["date",{"_index":228,"title":{},"body":{"classes/Users.html":{},"injectables/UsersService.html":{},"classes/Weather.html":{},"classes/WeatherDto.html":{},"injectables/WeatherService.html":{}}}],["date(date.now",{"_index":335,"title":{},"body":{"injectables/UsersService.html":{}}}],["date(user.expirationdate",{"_index":356,"title":{},"body":{"injectables/UsersService.html":{}}}],["date.now",{"_index":254,"title":{},"body":{"classes/Users.html":{},"injectables/UsersService.html":{},"classes/Weather.html":{},"injectables/WeatherService.html":{}}}],["date.toutcstring",{"_index":337,"title":{},"body":{"injectables/UsersService.html":{}}}],["db:migraterunning",{"_index":547,"title":{},"body":{"index.html":{}}}],["db_database",{"_index":568,"title":{},"body":{"index.html":{}}}],["db_dialect",{"_index":569,"title":{},"body":{"index.html":{}}}],["db_host",{"_index":566,"title":{},"body":{"index.html":{}}}],["db_password",{"_index":565,"title":{},"body":{"index.html":{}}}],["db_port",{"_index":567,"title":{},"body":{"index.html":{}}}],["db_user",{"_index":564,"title":{},"body":{"index.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"classes/UserDataDto.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"classes/Weather.html":{},"controllers/WeatherController.html":{}}}],["default",{"_index":594,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":309,"title":{},"body":{"modules/UsersModule.html":{}}}],["defaultvalue",{"_index":231,"title":{},"body":{"classes/Users.html":{},"classes/Weather.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/IsActiveMiddleware.html":{},"injectables/JwtStrategy.html":{},"classes/UserDataDto.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/Weather.html":{},"controllers/WeatherController.html":{},"classes/WeatherDto.html":{},"injectables/WeatherService.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules/WeatherModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":445,"title":{},"body":{"injectables/WeatherService.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":549,"title":{},"body":{"index.html":{}}}],["development.env",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["dialect",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["documentation",{"_index":479,"title":{},"body":{"coverage.html":{}}}],["dotenv",{"_index":515,"title":{},"body":{"dependencies.html":{}}}],["dto/user",{"_index":283,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/weather.dto",{"_index":402,"title":{},"body":{"controllers/WeatherController.html":{},"injectables/WeatherService.html":{}}}],["e",{"_index":341,"title":{},"body":{"injectables/UsersService.html":{}}}],["e2e",{"_index":558,"title":{},"body":{"index.html":{}}}],["eight",{"_index":210,"title":{},"body":{"classes/UserDataDto.html":{}}}],["email",{"_index":159,"title":{},"body":{"injectables/IsActiveMiddleware.html":{},"classes/UserDataDto.html":{},"classes/Users.html":{},"injectables/UsersService.html":{}}}],["enum",{"_index":248,"title":{},"body":{"classes/Users.html":{}}}],["enumerations",{"_index":531,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":89,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["envfilepath",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["example",{"_index":442,"title":{},"body":{"injectables/WeatherService.html":{}}}],["exclude",{"_index":108,"title":{},"body":{"modules/AppModule.html":{}}}],["expiradedate",{"_index":355,"title":{},"body":{"injectables/UsersService.html":{}}}],["expirationdate",{"_index":222,"title":{},"body":{"classes/Users.html":{},"injectables/UsersService.html":{}}}],["expired",{"_index":358,"title":{},"body":{"injectables/UsersService.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/IsActiveMiddleware.html":{},"injectables/JwtStrategy.html":{},"classes/UserDataDto.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/Weather.html":{},"controllers/WeatherController.html":{},"classes/WeatherDto.html":{},"modules/WeatherModule.html":{},"injectables/WeatherService.html":{}}}],["exports",{"_index":304,"title":{},"body":{"modules/UsersModule.html":{}}}],["express",{"_index":139,"title":{},"body":{"injectables/IsActiveMiddleware.html":{},"dependencies.html":{}}}],["extends",{"_index":179,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/Users.html":{},"classes/Weather.html":{}}}],["extractjwt",{"_index":174,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":185,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":230,"title":{},"body":{"classes/Users.html":{},"classes/Weather.html":{}}}],["fetches",{"_index":452,"title":{},"body":{"injectables/WeatherService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/IsActiveMiddleware.html":{},"injectables/JwtStrategy.html":{},"classes/UserDataDto.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/Weather.html":{},"controllers/WeatherController.html":{},"classes/WeatherDto.html":{},"modules/WeatherModule.html":{},"injectables/WeatherService.html":{},"coverage.html":{}}}],["find",{"_index":462,"title":{},"body":{"injectables/WeatherService.html":{}}}],["findall",{"_index":313,"title":{},"body":{"injectables/UsersService.html":{}}}],["findone",{"_index":314,"title":{},"body":{"injectables/UsersService.html":{}}}],["findone(id",{"_index":320,"title":{},"body":{"injectables/UsersService.html":{}}}],["format",{"_index":202,"title":{},"body":{"classes/UserDataDto.html":{}}}],["forroutes(userscontroller",{"_index":115,"title":{},"body":{"modules/AppModule.html":{}}}],["framework",{"_index":538,"title":{},"body":{"index.html":{}}}],["function",{"_index":488,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":533,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generate",{"_index":573,"title":{},"body":{"index.html":{}}}],["generatenewdata",{"_index":376,"title":{},"body":{"controllers/WeatherController.html":{},"injectables/WeatherService.html":{}}}],["get('')@useguards(undefined",{"_index":273,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:city",{"_index":416,"title":{},"body":{"controllers/WeatherController.html":{}}}],["get('/:id",{"_index":291,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:id')@useguards(undefined",{"_index":271,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/byuser",{"_index":413,"title":{},"body":{"controllers/WeatherController.html":{}}}],["get('/byuser')@useguards(undefined",{"_index":392,"title":{},"body":{"controllers/WeatherController.html":{}}}],["getallweatherdata",{"_index":377,"title":{},"body":{"controllers/WeatherController.html":{},"injectables/WeatherService.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getting",{"_index":535,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":260,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuser(@param('id",{"_index":292,"title":{},"body":{"controllers/UsersController.html":{}}}],["getuser(id",{"_index":270,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers",{"_index":261,"title":{},"body":{"controllers/UsersController.html":{}}}],["getweatherbycity",{"_index":378,"title":{},"body":{"controllers/WeatherController.html":{},"injectables/WeatherService.html":{}}}],["getweatherbycity(@param('city",{"_index":417,"title":{},"body":{"controllers/WeatherController.html":{}}}],["getweatherbycity(city",{"_index":388,"title":{},"body":{"controllers/WeatherController.html":{},"injectables/WeatherService.html":{}}}],["getweatherbyuser",{"_index":379,"title":{},"body":{"controllers/WeatherController.html":{},"injectables/WeatherService.html":{}}}],["getweatherbyuser(@req",{"_index":414,"title":{},"body":{"controllers/WeatherController.html":{}}}],["getweatherbyuser(id",{"_index":450,"title":{},"body":{"injectables/WeatherService.html":{}}}],["getweatherbyuser(request",{"_index":391,"title":{},"body":{"controllers/WeatherController.html":{}}}],["given",{"_index":441,"title":{},"body":{"injectables/WeatherService.html":{}}}],["hashpassword",{"_index":331,"title":{},"body":{"injectables/UsersService.html":{}}}],["hasmany",{"_index":244,"title":{},"body":{"classes/Users.html":{}}}],["hasmany((_type",{"_index":255,"title":{},"body":{"classes/Users.html":{}}}],["hello",{"_index":120,"title":{},"body":{"injectables/AppService.html":{}}}],["host",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["http://localhost:8083/weather/generate",{"_index":579,"title":{},"body":{"index.html":{}}}],["httpexception",{"_index":327,"title":{},"body":{"injectables/UsersService.html":{}}}],["httpstatus",{"_index":328,"title":{},"body":{"injectables/UsersService.html":{}}}],["httpstatus.bad_request",{"_index":353,"title":{},"body":{"injectables/UsersService.html":{}}}],["id",{"_index":148,"title":{},"body":{"injectables/IsActiveMiddleware.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"injectables/WeatherService.html":{}}}],["identifier",{"_index":480,"title":{},"body":{"coverage.html":{}}}],["ignore",{"_index":455,"title":{},"body":{"injectables/WeatherService.html":{}}}],["implements",{"_index":106,"title":{},"body":{"modules/AppModule.html":{},"injectables/IsActiveMiddleware.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/IsActiveMiddleware.html":{},"injectables/JwtStrategy.html":{},"classes/UserDataDto.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/Weather.html":{},"controllers/WeatherController.html":{},"modules/WeatherModule.html":{},"injectables/WeatherService.html":{}}}],["imports",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules/WeatherModule.html":{}}}],["incorrect",{"_index":201,"title":{},"body":{"classes/UserDataDto.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/IsActiveMiddleware.html":{},"injectables/JwtStrategy.html":{},"classes/UserDataDto.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/Weather.html":{},"controllers/WeatherController.html":{},"classes/WeatherDto.html":{},"injectables/WeatherService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/IsActiveMiddleware.html":{},"injectables/JwtStrategy.html":{},"classes/UserDataDto.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/Weather.html":{},"controllers/WeatherController.html":{},"classes/WeatherDto.html":{},"modules/WeatherModule.html":{},"injectables/WeatherService.html":{}}}],["inject",{"_index":399,"title":{},"body":{"controllers/WeatherController.html":{},"injectables/WeatherService.html":{}}}],["inject(cache_manager",{"_index":407,"title":{},"body":{"controllers/WeatherController.html":{},"injectables/WeatherService.html":{}}}],["injectable",{"_index":116,"title":{"injectables/AppService.html":{},"injectables/IsActiveMiddleware.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{},"injectables/WeatherService.html":{}},"body":{"injectables/AppService.html":{},"injectables/IsActiveMiddleware.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{},"injectables/WeatherService.html":{},"coverage.html":{}}}],["injectables",{"_index":117,"title":{},"body":{"injectables/AppService.html":{},"injectables/IsActiveMiddleware.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{},"injectables/WeatherService.html":{},"overview.html":{}}}],["injectmodel",{"_index":173,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{},"injectables/WeatherService.html":{}}}],["injectmodel(users",{"_index":181,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["injectmodel(weather",{"_index":456,"title":{},"body":{"injectables/WeatherService.html":{}}}],["install",{"_index":543,"title":{},"body":{"index.html":{}}}],["installation",{"_index":541,"title":{},"body":{"index.html":{}}}],["invalid",{"_index":350,"title":{},"body":{"injectables/UsersService.html":{}}}],["isactive",{"_index":223,"title":{},"body":{"classes/Users.html":{},"injectables/UsersService.html":{}}}],["isactivemiddleware",{"_index":68,"title":{"injectables/IsActiveMiddleware.html":{}},"body":{"modules/AppModule.html":{},"injectables/IsActiveMiddleware.html":{},"coverage.html":{}}}],["isglobal",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["jwt",{"_index":177,"title":{},"body":{"injectables/JwtStrategy.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"index.html":{}}}],["jwt.stategy",{"_index":140,"title":{},"body":{"injectables/IsActiveMiddleware.html":{},"modules/UsersModule.html":{}}}],["jwt_lifetime",{"_index":571,"title":{},"body":{"index.html":{}}}],["jwt_secret=loadtest",{"_index":572,"title":{},"body":{"index.html":{}}}],["jwtfromrequest",{"_index":184,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":305,"title":{},"body":{"modules/UsersModule.html":{}}}],["jwtmodule.register(configuration().jwt",{"_index":310,"title":{},"body":{"modules/UsersModule.html":{}}}],["jwtservice",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"injectables/IsActiveMiddleware.html":{},"injectables/UsersService.html":{},"modules/WeatherModule.html":{}}}],["jwtstrategy",{"_index":127,"title":{"injectables/JwtStrategy.html":{}},"body":{"injectables/IsActiveMiddleware.html":{},"injectables/JwtStrategy.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["lastlogin",{"_index":224,"title":{},"body":{"classes/Users.html":{},"injectables/UsersService.html":{}}}],["latitude",{"_index":364,"title":{},"body":{"classes/Weather.html":{},"classes/WeatherDto.html":{},"injectables/WeatherService.html":{}}}],["letter",{"_index":213,"title":{},"body":{"classes/UserDataDto.html":{}}}],["license",{"_index":589,"title":{},"body":{"properties.html":{}}}],["list",{"_index":446,"title":{},"body":{"injectables/WeatherService.html":{}}}],["load",{"_index":92,"title":{},"body":{"modules/AppModule.html":{}}}],["loadtest",{"_index":576,"title":{},"body":{"index.html":{}}}],["local.env",{"_index":91,"title":{},"body":{"modules/AppModule.html":{}}}],["login",{"_index":145,"title":{},"body":{"injectables/IsActiveMiddleware.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["login(@body",{"_index":296,"title":{},"body":{"controllers/UsersController.html":{}}}],["login(loginuserdto",{"_index":275,"title":{},"body":{"controllers/UsersController.html":{}}}],["login(userdatadto",{"_index":323,"title":{},"body":{"injectables/UsersService.html":{}}}],["loginuserdto",{"_index":278,"title":{},"body":{"controllers/UsersController.html":{}}}],["longitude",{"_index":365,"title":{},"body":{"classes/Weather.html":{},"classes/WeatherDto.html":{},"injectables/WeatherService.html":{}}}],["m",{"_index":578,"title":{},"body":{"index.html":{}}}],["manager",{"_index":396,"title":{},"body":{"controllers/WeatherController.html":{},"injectables/WeatherService.html":{},"dependencies.html":{}}}],["manual",{"_index":411,"title":{},"body":{"controllers/WeatherController.html":{},"injectables/WeatherService.html":{}}}],["matches",{"_index":216,"title":{},"body":{"classes/UserDataDto.html":{}}}],["matches(/^(?=.*\\d)(?=.*[a",{"_index":204,"title":{},"body":{"classes/UserDataDto.html":{}}}],["matches(/^[a",{"_index":195,"title":{},"body":{"classes/UserDataDto.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/IsActiveMiddleware.html":{},"injectables/JwtStrategy.html":{},"classes/UserDataDto.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/Weather.html":{},"controllers/WeatherController.html":{},"classes/WeatherDto.html":{},"modules/WeatherModule.html":{},"injectables/WeatherService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.round(math.random",{"_index":473,"title":{},"body":{"injectables/WeatherService.html":{}}}],["max",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["message",{"_index":200,"title":{},"body":{"classes/UserDataDto.html":{}}}],["metadata",{"_index":524,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":109,"title":{},"body":{"modules/AppModule.html":{},"injectables/WeatherService.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/IsActiveMiddleware.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/WeatherController.html":{},"injectables/WeatherService.html":{}}}],["middlewareconsumer",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["migration",{"_index":544,"title":{},"body":{"index.html":{}}}],["minimum",{"_index":209,"title":{},"body":{"classes/UserDataDto.html":{}}}],["miscellaneous",{"_index":530,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":553,"title":{},"body":{"index.html":{}}}],["model",{"_index":219,"title":{},"body":{"classes/Users.html":{},"classes/Weather.html":{}}}],["models",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules/WeatherModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules/WeatherModule.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules/WeatherModule.html":{},"modules.html":{},"overview.html":{}}}],["mysql2",{"_index":517,"title":{},"body":{"dependencies.html":{}}}],["n",{"_index":577,"title":{},"body":{"index.html":{}}}],["name",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"injectables/IsActiveMiddleware.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/WeatherController.html":{},"injectables/WeatherService.html":{}}}],["nest",{"_index":537,"title":{},"body":{"index.html":{}}}],["nestjs/cache",{"_index":395,"title":{},"body":{"controllers/WeatherController.html":{},"injectables/WeatherService.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/IsActiveMiddleware.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"controllers/WeatherController.html":{},"modules/WeatherModule.html":{},"injectables/WeatherService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":502,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"injectables/IsActiveMiddleware.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/WeatherModule.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":172,"title":{},"body":{"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"controllers/WeatherController.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":505,"title":{},"body":{"dependencies.html":{}}}],["nestjs/sequelize",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtStrategy.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"modules/WeatherModule.html":{},"injectables/WeatherService.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":137,"title":{},"body":{"injectables/IsActiveMiddleware.html":{}}}],["nestmodule",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["new",{"_index":113,"title":{},"body":{"modules/AppModule.html":{},"injectables/IsActiveMiddleware.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{},"controllers/WeatherController.html":{},"coverage.html":{},"index.html":{}}}],["next",{"_index":133,"title":{},"body":{"injectables/IsActiveMiddleware.html":{}}}],["nextfunction",{"_index":134,"title":{},"body":{"injectables/IsActiveMiddleware.html":{}}}],["node:crypto",{"_index":326,"title":{},"body":{"injectables/UsersService.html":{},"injectables/WeatherService.html":{}}}],["node_port",{"_index":562,"title":{},"body":{"index.html":{}}}],["npx",{"_index":545,"title":{},"body":{"index.html":{}}}],["number",{"_index":214,"title":{},"body":{"classes/UserDataDto.html":{},"classes/Weather.html":{},"classes/WeatherDto.html":{}}}],["one",{"_index":212,"title":{},"body":{"classes/UserDataDto.html":{}}}],["op",{"_index":454,"title":{},"body":{"injectables/WeatherService.html":{}}}],["op.between",{"_index":465,"title":{},"body":{"injectables/WeatherService.html":{}}}],["op.like",{"_index":464,"title":{},"body":{"injectables/WeatherService.html":{}}}],["optional",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"injectables/IsActiveMiddleware.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/WeatherController.html":{},"injectables/WeatherService.html":{}}}],["out",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules/WeatherModule.html":{},"overview.html":{}}}],["overview",{"_index":584,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":498,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":280,"title":{},"body":{"controllers/UsersController.html":{},"controllers/WeatherController.html":{},"injectables/WeatherService.html":{}}}],["parameters",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"injectables/IsActiveMiddleware.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/WeatherController.html":{},"injectables/WeatherService.html":{}}}],["parseint(process.env.db_port",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["parseint(process.env.jwt_lifetime",{"_index":336,"title":{},"body":{"injectables/UsersService.html":{}}}],["parseint(process.env.salt",{"_index":333,"title":{},"body":{"injectables/UsersService.html":{}}}],["passport",{"_index":176,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":306,"title":{},"body":{"modules/UsersModule.html":{}}}],["passportmodule.register",{"_index":308,"title":{},"body":{"modules/UsersModule.html":{}}}],["passportstrategy",{"_index":171,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":180,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"classes/UserDataDto.html":{},"classes/Users.html":{},"injectables/UsersService.html":{}}}],["path",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["pg",{"_index":521,"title":{},"body":{"dependencies.html":{}}}],["please",{"_index":207,"title":{},"body":{"classes/UserDataDto.html":{},"injectables/UsersService.html":{}}}],["port",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["post",{"_index":267,"title":{},"body":{"controllers/UsersController.html":{},"controllers/WeatherController.html":{},"index.html":{}}}],["post('')@useguards(undefined",{"_index":382,"title":{},"body":{"controllers/WeatherController.html":{}}}],["post('/activate/:code",{"_index":263,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('/generate",{"_index":384,"title":{},"body":{"controllers/WeatherController.html":{}}}],["post('/login",{"_index":276,"title":{},"body":{"controllers/UsersController.html":{}}}],["postgresql",{"_index":563,"title":{},"body":{"index.html":{}}}],["prefix",{"_index":258,"title":{},"body":{"controllers/UsersController.html":{},"controllers/WeatherController.html":{}}}],["private",{"_index":141,"title":{},"body":{"injectables/IsActiveMiddleware.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{},"controllers/WeatherController.html":{},"injectables/WeatherService.html":{}}}],["process",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"injectables/UsersService.html":{}}}],["process.env",{"_index":595,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.db_database",{"_index":95,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.db_dialect",{"_index":96,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.db_host",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.db_password",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["process.env.db_user",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["promise",{"_index":322,"title":{},"body":{"injectables/UsersService.html":{},"injectables/WeatherService.html":{}}}],["properties",{"_index":194,"title":{"properties.html":{}},"body":{"classes/UserDataDto.html":{},"classes/Users.html":{},"classes/Weather.html":{},"classes/WeatherDto.html":{},"properties.html":{}}}],["provide",{"_index":208,"title":{},"body":{"classes/UserDataDto.html":{}}}],["providers",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules/WeatherModule.html":{}}}],["randombytes",{"_index":325,"title":{},"body":{"injectables/UsersService.html":{},"injectables/WeatherService.html":{}}}],["randombytes(255).tostring('hex",{"_index":470,"title":{},"body":{"injectables/WeatherService.html":{}}}],["randombytes(30).tostring('hex",{"_index":334,"title":{},"body":{"injectables/UsersService.html":{}}}],["randombytes(6).tostring('hex",{"_index":471,"title":{},"body":{"injectables/WeatherService.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["records",{"_index":575,"title":{},"body":{"index.html":{}}}],["reflect",{"_index":523,"title":{},"body":{"dependencies.html":{}}}],["repository",{"_index":540,"title":{},"body":{"index.html":{}}}],["req",{"_index":136,"title":{},"body":{"injectables/IsActiveMiddleware.html":{},"controllers/WeatherController.html":{}}}],["req.body",{"_index":158,"title":{},"body":{"injectables/IsActiveMiddleware.html":{}}}],["req.headers['authorization",{"_index":142,"title":{},"body":{"injectables/IsActiveMiddleware.html":{}}}],["req.headers['authorization'].slice(7",{"_index":151,"title":{},"body":{"injectables/IsActiveMiddleware.html":{}}}],["request",{"_index":130,"title":{},"body":{"injectables/IsActiveMiddleware.html":{},"controllers/WeatherController.html":{}}}],["request.body.id",{"_index":421,"title":{},"body":{"controllers/WeatherController.html":{}}}],["requestmethod",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["requestmethod.post",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["res",{"_index":131,"title":{},"body":{"injectables/IsActiveMiddleware.html":{}}}],["reset",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules/WeatherModule.html":{},"overview.html":{}}}],["response",{"_index":132,"title":{},"body":{"injectables/IsActiveMiddleware.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/IsActiveMiddleware.html":{},"injectables/JwtStrategy.html":{},"classes/UserDataDto.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/Weather.html":{},"controllers/WeatherController.html":{},"classes/WeatherDto.html":{},"modules/WeatherModule.html":{},"injectables/WeatherService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/WeatherController.html":{},"injectables/WeatherService.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/IsActiveMiddleware.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"controllers/WeatherController.html":{},"injectables/WeatherService.html":{}}}],["role",{"_index":225,"title":{},"body":{"classes/Users.html":{}}}],["run",{"_index":550,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":526,"title":{},"body":{"dependencies.html":{}}}],["salt",{"_index":570,"title":{},"body":{"index.html":{}}}],["secretorkey",{"_index":186,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["sequelize",{"_index":246,"title":{},"body":{"classes/Users.html":{},"classes/Weather.html":{},"injectables/WeatherService.html":{},"dependencies.html":{},"index.html":{}}}],["sequelize/types/sequelize",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["sequelizemodule",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules/WeatherModule.html":{}}}],["sequelizemodule.forfeature([users",{"_index":311,"title":{},"body":{"modules/UsersModule.html":{}}}],["sequelizemodule.forfeature([weather",{"_index":436,"title":{},"body":{"modules/WeatherModule.html":{}}}],["sequelizemodule.forroot",{"_index":93,"title":{},"body":{"modules/AppModule.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/IsActiveMiddleware.html":{},"injectables/JwtStrategy.html":{},"classes/UserDataDto.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/Weather.html":{},"controllers/WeatherController.html":{},"classes/WeatherDto.html":{},"modules/WeatherModule.html":{},"injectables/WeatherService.html":{}}}],["src/.../app.ts",{"_index":593,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":534,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../users.model.ts",{"_index":532,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:10",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.module.ts:48",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":118,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":119,"title":{},"body":{"injectables/AppService.html":{}}}],["src/config/app.ts",{"_index":484,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":487,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/users/dto/user",{"_index":192,"title":{},"body":{"classes/UserDataDto.html":{},"coverage.html":{}}}],["src/users/isactive.middleware.ts",{"_index":122,"title":{},"body":{"injectables/IsActiveMiddleware.html":{},"coverage.html":{}}}],["src/users/isactive.middleware.ts:12",{"_index":128,"title":{},"body":{"injectables/IsActiveMiddleware.html":{}}}],["src/users/isactive.middleware.ts:17",{"_index":135,"title":{},"body":{"injectables/IsActiveMiddleware.html":{}}}],["src/users/jwt.stategy.ts",{"_index":162,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/users/jwt.stategy.ts:10",{"_index":165,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/users/jwt.stategy.ts:21",{"_index":168,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/users/users.controller.ts",{"_index":257,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:13",{"_index":274,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:19",{"_index":272,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:24",{"_index":268,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:29",{"_index":277,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:34",{"_index":264,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.model.ts",{"_index":218,"title":{},"body":{"classes/Users.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/users/users.model.ts:13",{"_index":235,"title":{},"body":{"classes/Users.html":{}}}],["src/users/users.model.ts:16",{"_index":240,"title":{},"body":{"classes/Users.html":{}}}],["src/users/users.model.ts:23",{"_index":242,"title":{},"body":{"classes/Users.html":{}}}],["src/users/users.model.ts:26",{"_index":239,"title":{},"body":{"classes/Users.html":{}}}],["src/users/users.model.ts:29",{"_index":233,"title":{},"body":{"classes/Users.html":{}}}],["src/users/users.model.ts:32",{"_index":238,"title":{},"body":{"classes/Users.html":{}}}],["src/users/users.model.ts:35",{"_index":227,"title":{},"body":{"classes/Users.html":{}}}],["src/users/users.model.ts:38",{"_index":236,"title":{},"body":{"classes/Users.html":{}}}],["src/users/users.module.ts",{"_index":303,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":312,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:19",{"_index":315,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:26",{"_index":319,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:30",{"_index":321,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:38",{"_index":318,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:61",{"_index":324,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:89",{"_index":316,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/weather/dto/weather.dto.ts",{"_index":423,"title":{},"body":{"classes/WeatherDto.html":{},"coverage.html":{}}}],["src/weather/dto/weather.dto.ts:2",{"_index":424,"title":{},"body":{"classes/WeatherDto.html":{}}}],["src/weather/dto/weather.dto.ts:3",{"_index":427,"title":{},"body":{"classes/WeatherDto.html":{}}}],["src/weather/dto/weather.dto.ts:4",{"_index":428,"title":{},"body":{"classes/WeatherDto.html":{}}}],["src/weather/dto/weather.dto.ts:5",{"_index":426,"title":{},"body":{"classes/WeatherDto.html":{}}}],["src/weather/dto/weather.dto.ts:6",{"_index":429,"title":{},"body":{"classes/WeatherDto.html":{}}}],["src/weather/dto/weather.dto.ts:7",{"_index":425,"title":{},"body":{"classes/WeatherDto.html":{}}}],["src/weather/weather.controller.ts",{"_index":374,"title":{},"body":{"controllers/WeatherController.html":{},"coverage.html":{}}}],["src/weather/weather.controller.ts:32",{"_index":387,"title":{},"body":{"controllers/WeatherController.html":{}}}],["src/weather/weather.controller.ts:39",{"_index":393,"title":{},"body":{"controllers/WeatherController.html":{}}}],["src/weather/weather.controller.ts:46",{"_index":390,"title":{},"body":{"controllers/WeatherController.html":{}}}],["src/weather/weather.controller.ts:52",{"_index":383,"title":{},"body":{"controllers/WeatherController.html":{}}}],["src/weather/weather.controller.ts:57",{"_index":385,"title":{},"body":{"controllers/WeatherController.html":{}}}],["src/weather/weather.model.ts",{"_index":360,"title":{},"body":{"classes/Weather.html":{},"coverage.html":{}}}],["src/weather/weather.model.ts:12",{"_index":372,"title":{},"body":{"classes/Weather.html":{}}}],["src/weather/weather.model.ts:15",{"_index":370,"title":{},"body":{"classes/Weather.html":{}}}],["src/weather/weather.model.ts:18",{"_index":373,"title":{},"body":{"classes/Weather.html":{}}}],["src/weather/weather.model.ts:21",{"_index":369,"title":{},"body":{"classes/Weather.html":{}}}],["src/weather/weather.model.ts:24",{"_index":367,"title":{},"body":{"classes/Weather.html":{}}}],["src/weather/weather.model.ts:6",{"_index":368,"title":{},"body":{"classes/Weather.html":{}}}],["src/weather/weather.model.ts:9",{"_index":371,"title":{},"body":{"classes/Weather.html":{}}}],["src/weather/weather.module.ts",{"_index":433,"title":{},"body":{"modules/WeatherModule.html":{}}}],["src/weather/weather.service.ts",{"_index":437,"title":{},"body":{"injectables/WeatherService.html":{},"coverage.html":{}}}],["src/weather/weather.service.ts:23",{"_index":448,"title":{},"body":{"injectables/WeatherService.html":{}}}],["src/weather/weather.service.ts:27",{"_index":449,"title":{},"body":{"injectables/WeatherService.html":{}}}],["src/weather/weather.service.ts:54",{"_index":451,"title":{},"body":{"injectables/WeatherService.html":{}}}],["src/weather/weather.service.ts:76",{"_index":438,"title":{},"body":{"injectables/WeatherService.html":{}}}],["src/weather/weather.service.ts:80",{"_index":447,"title":{},"body":{"injectables/WeatherService.html":{}}}],["start",{"_index":551,"title":{},"body":{"index.html":{}}}],["start:devtest",{"_index":554,"title":{},"body":{"index.html":{}}}],["started",{"_index":536,"title":{"index.html":{}},"body":{}}],["starter",{"_index":539,"title":{},"body":{"index.html":{}}}],["statements",{"_index":481,"title":{},"body":{"coverage.html":{}}}],["strategy",{"_index":175,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/UserDataDto.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/Weather.html":{},"classes/WeatherDto.html":{}}}],["super",{"_index":183,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["support",{"_index":581,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":582,"title":{},"body":{"modules.html":{}}}],["table",{"_index":245,"title":{},"body":{"classes/Users.html":{},"classes/Weather.html":{},"coverage.html":{}}}],["tablename",{"_index":250,"title":{},"body":{"classes/Users.html":{},"classes/Weather.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":497,"title":{},"body":{"coverage.html":{}}}],["temp",{"_index":459,"title":{},"body":{"injectables/WeatherService.html":{}}}],["temperature",{"_index":366,"title":{},"body":{"classes/Weather.html":{},"classes/WeatherDto.html":{},"injectables/WeatherService.html":{}}}],["test",{"_index":557,"title":{},"body":{"index.html":{}}}],["test:cov.env",{"_index":560,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":559,"title":{},"body":{"index.html":{}}}],["tests",{"_index":556,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.cachemanager.get(id",{"_index":467,"title":{},"body":{"injectables/WeatherService.html":{}}}],["this.cachemanager.set(id",{"_index":468,"title":{},"body":{"injectables/WeatherService.html":{}}}],["this.jwtservice.decode",{"_index":150,"title":{},"body":{"injectables/IsActiveMiddleware.html":{}}}],["this.jwtservice.sign",{"_index":347,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.jwtstrategy.validate(id",{"_index":153,"title":{},"body":{"injectables/IsActiveMiddleware.html":{}}}],["this.userservice.activate(code",{"_index":299,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.createuser(createuserdto",{"_index":295,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.findall",{"_index":290,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.findone(id",{"_index":293,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.userservice.login(loginuserdto",{"_index":297,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersmodel.create",{"_index":339,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersmodel.findall",{"_index":330,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersmodel.findone",{"_index":188,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["this.usersmodel.update",{"_index":345,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.weathermodel.create",{"_index":469,"title":{},"body":{"injectables/WeatherService.html":{}}}],["this.weathermodel.findall",{"_index":458,"title":{},"body":{"injectables/WeatherService.html":{}}}],["this.weatherservice.addweather(weatherdto",{"_index":420,"title":{},"body":{"controllers/WeatherController.html":{}}}],["this.weatherservice.generatenewdata",{"_index":422,"title":{},"body":{"controllers/WeatherController.html":{}}}],["this.weatherservice.getallweatherdata",{"_index":410,"title":{},"body":{"controllers/WeatherController.html":{}}}],["this.weatherservice.getweatherbycity(city",{"_index":418,"title":{},"body":{"controllers/WeatherController.html":{}}}],["this.weatherservice.getweatherbyuser(request.body.id",{"_index":415,"title":{},"body":{"controllers/WeatherController.html":{}}}],["throw",{"_index":143,"title":{},"body":{"injectables/IsActiveMiddleware.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["transformer",{"_index":510,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"classes/Users.html":{},"injectables/UsersService.html":{}}}],["try",{"_index":338,"title":{},"body":{"injectables/UsersService.html":{}}}],["ttl",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["type",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"injectables/IsActiveMiddleware.html":{},"classes/UserDataDto.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/Weather.html":{},"controllers/WeatherController.html":{},"classes/WeatherDto.html":{},"injectables/WeatherService.html":{},"coverage.html":{}}}],["typeof",{"_index":182,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{},"injectables/WeatherService.html":{}}}],["types/passport",{"_index":506,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":247,"title":{},"body":{"classes/Users.html":{},"classes/Weather.html":{},"dependencies.html":{},"index.html":{}}}],["unauthorizedexception",{"_index":138,"title":{},"body":{"injectables/IsActiveMiddleware.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["unauthorizedexception('please",{"_index":144,"title":{},"body":{"injectables/IsActiveMiddleware.html":{}}}],["undefined",{"_index":232,"title":{},"body":{"classes/Users.html":{},"classes/Weather.html":{}}}],["unique",{"_index":234,"title":{},"body":{"classes/Users.html":{}}}],["unit",{"_index":555,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":170,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{},"injectables/WeatherService.html":{}}}],["unlicensed",{"_index":590,"title":{},"body":{"properties.html":{}}}],["use",{"_index":124,"title":{},"body":{"injectables/IsActiveMiddleware.html":{}}}],["use(req",{"_index":129,"title":{},"body":{"injectables/IsActiveMiddleware.html":{}}}],["useguards",{"_index":281,"title":{},"body":{"controllers/UsersController.html":{},"controllers/WeatherController.html":{}}}],["useguards(authguard",{"_index":289,"title":{},"body":{"controllers/UsersController.html":{},"controllers/WeatherController.html":{}}}],["useinterceptors",{"_index":400,"title":{},"body":{"controllers/WeatherController.html":{}}}],["useinterceptors(cacheinterceptor",{"_index":409,"title":{},"body":{"controllers/WeatherController.html":{}}}],["useinterceptors(cacheinterceptor)@get('')@useguards(undefined",{"_index":386,"title":{},"body":{"controllers/WeatherController.html":{}}}],["useinterceptors(cacheinterceptor)@get('/:city')@useguards(undefined",{"_index":389,"title":{},"body":{"controllers/WeatherController.html":{}}}],["useinterceptors(classserializerinterceptor",{"_index":406,"title":{},"body":{"controllers/WeatherController.html":{}}}],["user",{"_index":152,"title":{},"body":{"injectables/IsActiveMiddleware.html":{},"injectables/JwtStrategy.html":{},"classes/Users.html":{},"injectables/UsersService.html":{},"injectables/WeatherService.html":{},"miscellaneous/enumerations.html":{}}}],["user.confirmationcode",{"_index":357,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.datavalues.email",{"_index":160,"title":{},"body":{"injectables/IsActiveMiddleware.html":{}}}],["user.datavalues.id",{"_index":161,"title":{},"body":{"injectables/IsActiveMiddleware.html":{}}}],["user.email",{"_index":256,"title":{},"body":{"classes/Users.html":{},"injectables/UsersService.html":{}}}],["user.id",{"_index":348,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.isactive",{"_index":154,"title":{},"body":{"injectables/IsActiveMiddleware.html":{}}}],["user.password",{"_index":344,"title":{},"body":{"injectables/UsersService.html":{}}}],["userdatadto",{"_index":190,"title":{"classes/UserDataDto.html":{}},"body":{"classes/UserDataDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["username",{"_index":104,"title":{},"body":{"modules/AppModule.html":{}}}],["userrole",{"_index":241,"title":{},"body":{"classes/Users.html":{},"miscellaneous/enumerations.html":{}}}],["userrole.user",{"_index":252,"title":{},"body":{"classes/Users.html":{}}}],["users",{"_index":72,"title":{"classes/Users.html":{}},"body":{"modules/AppModule.html":{},"injectables/JwtStrategy.html":{},"classes/Users.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users.controller",{"_index":307,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.model",{"_index":178,"title":{},"body":{"injectables/JwtStrategy.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["users.service",{"_index":286,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/isactive.middleware",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["users/users.controller",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["users/users.model",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["users/users.module",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"modules/WeatherModule.html":{}}}],["userscontroller",{"_index":70,"title":{"controllers/UsersController.html":{}},"body":{"modules/AppModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":288,"title":{},"body":{"controllers/UsersController.html":{}}}],["usersmodel",{"_index":166,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["usersmodule",{"_index":35,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules/WeatherModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":285,"title":{"injectables/UsersService.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["validate",{"_index":163,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(authorization",{"_index":167,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validator",{"_index":217,"title":{},"body":{"classes/UserDataDto.html":{},"dependencies.html":{}}}],["value",{"_index":466,"title":{},"body":{"injectables/WeatherService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":485,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":592,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":587,"title":{},"body":{"properties.html":{}}}],["void",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"injectables/WeatherService.html":{}}}],["watch",{"_index":552,"title":{},"body":{"index.html":{}}}],["weather",{"_index":77,"title":{"classes/Weather.html":{}},"body":{"modules/AppModule.html":{},"classes/Users.html":{},"classes/Weather.html":{},"controllers/WeatherController.html":{},"modules/WeatherModule.html":{},"injectables/WeatherService.html":{},"coverage.html":{}}}],["weather.controller",{"_index":434,"title":{},"body":{"modules/WeatherModule.html":{}}}],["weather.model",{"_index":435,"title":{},"body":{"modules/WeatherModule.html":{},"injectables/WeatherService.html":{}}}],["weather.service",{"_index":404,"title":{},"body":{"controllers/WeatherController.html":{},"modules/WeatherModule.html":{}}}],["weather/generate",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["weather/weather.controller",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["weather/weather.model",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"classes/Users.html":{}}}],["weather/weather.module",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["weathercontroller",{"_index":75,"title":{"controllers/WeatherController.html":{}},"body":{"modules/AppModule.html":{},"controllers/WeatherController.html":{},"modules/WeatherModule.html":{},"coverage.html":{}}}],["weatherdto",{"_index":381,"title":{"classes/WeatherDto.html":{}},"body":{"controllers/WeatherController.html":{},"classes/WeatherDto.html":{},"injectables/WeatherService.html":{},"coverage.html":{}}}],["weathermodel",{"_index":457,"title":{},"body":{"injectables/WeatherService.html":{}}}],["weathermodule",{"_index":36,"title":{"modules/WeatherModule.html":{}},"body":{"modules/AppModule.html":{},"modules/WeatherModule.html":{},"modules.html":{},"overview.html":{}}}],["weatherservice",{"_index":403,"title":{"injectables/WeatherService.html":{}},"body":{"controllers/WeatherController.html":{},"modules/WeatherModule.html":{},"injectables/WeatherService.html":{},"coverage.html":{},"overview.html":{}}}],["weatherservice.addweather(city",{"_index":443,"title":{},"body":{"injectables/WeatherService.html":{}}}],["weatherservice.getweatherbyuser(1",{"_index":453,"title":{},"body":{"injectables/WeatherService.html":{}}}],["world",{"_index":121,"title":{},"body":{"injectables/AppService.html":{}}}],["yarn",{"_index":542,"title":{},"body":{"index.html":{}}}],["z0",{"_index":197,"title":{},"body":{"classes/UserDataDto.html":{}}}],["z])(?=.*[a",{"_index":205,"title":{},"body":{"classes/UserDataDto.html":{}}}],["z]).{8",{"_index":206,"title":{},"body":{"classes/UserDataDto.html":{}}}],["za",{"_index":196,"title":{},"body":{"classes/UserDataDto.html":{}}}],["zoom",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules/WeatherModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\n\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nWeatherModule\n\nWeatherModule\n\nAppModule -->\n\nWeatherModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                        \n                            WeatherModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n            \n                \n                    Defined in src/app.module.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    consumer\n                                    \n                                            MiddlewareConsumer\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n    \n\n\n    \n        import {\n  CacheModule,\n  MiddlewareConsumer,\n  Module,\n  NestModule,\n  RequestMethod,\n} from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { SequelizeModule } from '@nestjs/sequelize';\nimport * as process from 'process';\nimport { Dialect } from 'sequelize/types/sequelize';\n\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport configuration from './config/app';\nimport { IsActiveMiddleware } from './users/isActive.middleware';\nimport { UsersController } from './users/users.controller';\nimport { Users } from './users/users.model';\nimport { UsersModule } from './users/users.module';\nimport { WeatherController } from './weather/weather.controller';\nimport { Weather } from './weather/weather.model';\nimport { WeatherModule } from './weather/weather.module';\n\n@Module({\n  controllers: [AppController],\n  imports: [\n    CacheModule.register({ isGlobal: true, max: 1000, ttl: 10000 }),\n    ConfigModule.forRoot({\n      envFilePath: ['.env', '.development.env', '.local.env'],\n      load: [configuration],\n    }),\n    SequelizeModule.forRoot({\n      database: process.env.DB_DATABASE,\n      dialect: process.env.DB_DIALECT as Dialect,\n      host: process.env.DB_HOST,\n      models: [Users, Weather],\n      password: process.env.DB_PASSWORD,\n      port: parseInt(process.env.DB_PORT),\n      username: process.env.DB_USER,\n    }),\n    UsersModule,\n    WeatherModule,\n  ],\n  providers: [AppService, JwtService],\n})\nexport class AppModule implements NestModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer\n      .apply(IsActiveMiddleware)\n      .exclude(\n        { method: RequestMethod.POST, path: 'users' },\n        { method: RequestMethod.POST, path: 'users/(.*)' },\n        { method: RequestMethod.POST, path: 'weather/generate-new-data' },\n      )\n      .forRoutes(UsersController, WeatherController);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/IsActiveMiddleware.html":{"url":"injectables/IsActiveMiddleware.html","title":"injectable - IsActiveMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  IsActiveMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/isActive.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtStrategy: JwtStrategy, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/users/isActive.middleware.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtStrategy\n                                                  \n                                                        \n                                                                        JwtStrategy\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        use\n                        \n                    \n                \n            \n            \n                \n                    \n                    use(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n            \n                \n                    Defined in src/users/isActive.middleware.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    next\n                                    \n                                            NextFunction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NestMiddleware,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { NextFunction, Request, Response } from 'express';\n\nimport { JwtStrategy } from './jwt.stategy';\n\n@Injectable()\nexport class IsActiveMiddleware implements NestMiddleware {\n  constructor(\n    private jwtStrategy: JwtStrategy,\n    private jwtService: JwtService,\n  ) {}\n  async use(req: Request, res: Response, next: NextFunction) {\n    if (!req.headers['authorization'])\n      throw new UnauthorizedException('Please login before request');\n    const id = await this.jwtService.decode(\n      req.headers['authorization'].slice(7),\n    );\n    const user = await this.jwtStrategy.validate(id);\n    if (!user.isActive) {\n      throw new UnauthorizedException('Please activate your account to access');\n    }\n\n    req.body = { email: user.dataValues.email, id: user.dataValues.id };\n\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/jwt.stategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersModel)\n                    \n                \n                        \n                            \n                                Defined in src/users/jwt.stategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersModel\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(authorization)\n                \n            \n\n\n            \n                \n                    Defined in src/users/jwt.stategy.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authorization\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { InjectModel } from '@nestjs/sequelize';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\n\nimport configuration from '../config/app';\nimport { Users } from './users.model';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    @InjectModel(Users)\n    private readonly usersModel: typeof Users,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: configuration().jwt.secret,\n    });\n  }\n\n  async validate(authorization) {\n    const user = await this.usersModel.findOne({\n      where: {\n        id: authorization['id'],\n      },\n    });\n\n    if (!user) throw new UnauthorizedException();\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserDataDto.html":{"url":"classes/UserDataDto.html","title":"class - UserDataDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserDataDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/user-data.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Matches(/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/, {message: 'incorrect email format.'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-data.dto.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Matches(/^(?=.*\\d)(?=.*[a-z])(?=.*[a-zA-Z]).{8,}$/, {message: 'incorrect password format. Please provide minimum eight characters, at least one letter and one number'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/user-data.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Matches } from 'class-validator';\n\nexport class UserDataDto {\n  @Matches(\n    /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/,\n    { message: 'incorrect email format.' },\n  )\n  email: string;\n\n  @Matches(/^(?=.*\\d)(?=.*[a-z])(?=.*[a-zA-Z]).{8,}$/, {\n    message:\n      'incorrect password format. Please provide minimum eight characters, at least one letter and one number',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Users.html":{"url":"classes/Users.html","title":"class - Users","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Users\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.model.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Model\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                confirmationCode\n                            \n                            \n                                createdAt\n                            \n                            \n                                email\n                            \n                            \n                                expirationDate\n                            \n                            \n                                isActive\n                            \n                            \n                                lastLogin\n                            \n                            \n                                password\n                            \n                            \n                                role\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        confirmationCode\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.model.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({allowNull: false, defaultValue: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.model.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({allowNull: false, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.model.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        expirationDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.model.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isActive\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({allowNull: false, defaultValue: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.model.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        lastLogin\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({allowNull: false, defaultValue: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.model.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({allowNull: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.model.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRole\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({allowNull: false, defaultValue: undefined, type: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/users.model.ts:23\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, DataType, HasMany, Model, Table } from 'sequelize-typescript';\n\nimport { Weather } from '../weather/weather.model';\n\nenum UserRole {\n  admin = 'admin',\n  user = 'user',\n}\n\n@Table({ tableName: 'users' })\nexport class Users extends Model {\n  @Column({ allowNull: false, unique: true })\n  email: string;\n\n  @Column({ allowNull: false })\n  password: string;\n\n  @Column({\n    allowNull: false,\n    defaultValue: UserRole.user,\n    type: DataType.ENUM(...Object.values(UserRole)),\n  })\n  role: UserRole;\n\n  @Column({ allowNull: false, defaultValue: Date.now() })\n  lastLogin: Date;\n\n  @Column({ allowNull: false, defaultValue: Date.now() })\n  createdAt: Date;\n\n  @Column({ allowNull: false, defaultValue: false })\n  isActive: boolean;\n\n  @Column\n  confirmationCode: string;\n\n  @Column\n  expirationDate: string;\n\n  // @HasMany((_type) => Weather, (user) => user.email)\n  // weather: Weather[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                activate\n                            \n                            \n                                createUser\n                            \n                            \n                                getUser\n                            \n                            \n                                getUsers\n                            \n                            \n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        activate\n                        \n                    \n                \n            \n            \n                \nactivate(code)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/activate/:code')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    code\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createUser\n                        \n                    \n                \n            \n            \n                \ncreateUser(createUserDto: UserDataDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDto\n                                    \n                                                UserDataDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUser\n                        \n                    \n                \n            \n            \n                \ngetUser(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUsers\n                        \n                    \n                \n            \n            \n                \ngetUsers()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        login\n                        \n                    \n                \n            \n            \n                \nlogin(loginUserDto: UserDataDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/login')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    loginUserDto\n                                    \n                                                UserDataDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Post, UseGuards } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\nimport { UserDataDto } from './dto/user-data.dto';\nimport { UsersService } from './users.service';\n\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly userService: UsersService) {}\n\n  @Get('')\n  @UseGuards(AuthGuard())\n  getUsers() {\n    return this.userService.findAll();\n  }\n\n  @Get('/:id')\n  @UseGuards(AuthGuard())\n  getUser(@Param('id') id: string) {\n    return this.userService.findOne(id);\n  }\n\n  @Post('')\n  createUser(@Body() createUserDto: UserDataDto) {\n    return this.userService.createUser(createUserDto);\n  }\n\n  @Post('/login')\n  login(@Body() loginUserDto: UserDataDto) {\n    return this.userService.login(loginUserDto);\n  }\n\n  @Post('/activate/:code')\n  activate(@Param('code') code) {\n    return this.userService.activate(code);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nJwtStrategy  -->\n\nUsersModule->JwtStrategy \n\n\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nUsersModule -->\n\nJwtStrategy->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            JwtStrategy\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            JwtStrategy\n                        \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { SequelizeModule } from '@nestjs/sequelize';\n\nimport configuration from '../config/app';\nimport { JwtStrategy } from './jwt.stategy';\nimport { UsersController } from './users.controller';\nimport { Users } from './users.model';\nimport { UsersService } from './users.service';\n\n@Module({\n  controllers: [UsersController],\n  exports: [JwtStrategy, PassportModule, UsersService],\n  imports: [\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.register(configuration().jwt),\n    SequelizeModule.forFeature([Users]),\n  ],\n  providers: [UsersService, JwtStrategy],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                activate\n                            \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                    Async\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersModel, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersModel\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        activate\n                        \n                    \n                \n            \n            \n                \n                    \n                    activate(code)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    code\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(userDataDto: UserDataDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDataDto\n                                    \n                                                UserDataDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(userDataDto: UserDataDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDataDto\n                                    \n                                                UserDataDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { randomBytes } from 'node:crypto';\n\nimport {\n  HttpException,\n  HttpStatus,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { InjectModel } from '@nestjs/sequelize';\nimport * as bcrypt from 'bcrypt';\nimport * as process from 'process';\n\nimport configuration from '../config/app';\nimport { UserDataDto } from './dto/user-data.dto';\nimport { Users } from './users.model';\n\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectModel(Users)\n    private readonly usersModel: typeof Users,\n    private jwtService: JwtService,\n  ) {}\n\n  async findAll() {\n    return this.usersModel.findAll();\n  }\n\n  findOne(id: string): Promise {\n    return this.usersModel.findOne({\n      where: {\n        id,\n      },\n    });\n  }\n\n  async createUser(userDataDto: UserDataDto) {\n    const { email, password } = userDataDto;\n    const hashPassword = await bcrypt.hash(\n      password,\n      parseInt(process.env.SALT),\n    );\n    const confirmationCode = randomBytes(30).toString('hex');\n\n    const date = new Date(Date.now() + parseInt(process.env.JWT_LIFETIME));\n    const expirationDate = date.toUTCString();\n\n    try {\n      await this.usersModel.create({\n        confirmationCode: confirmationCode,\n        email: email,\n        expirationDate: expirationDate,\n        password: hashPassword,\n      });\n    } catch (e) {\n      console.error(e.message);\n    }\n  }\n\n  async login(userDataDto: UserDataDto) {\n    const { email, password } = userDataDto;\n    const user = await this.usersModel.findOne({\n      where: {\n        email,\n      },\n    });\n    if (user && (await bcrypt.compare(password, user.password))) {\n      await this.usersModel.update(\n        { lastLogin: Date.now() },\n        {\n          where: {\n            email: email,\n          },\n        },\n      );\n      const accessToken = this.jwtService.sign(\n        { id: user.id },\n        configuration().jwt,\n      );\n\n      return { accessToken };\n    } else\n      throw new UnauthorizedException(\n        'Invalid email or password, please try again',\n      );\n  }\n\n  async activate(code) {\n    const user = await this.usersModel.findOne({\n      where: { confirmationCode: code },\n    });\n\n    if (!user)\n      throw new HttpException(\n        `Invalid confirmation code`,\n        HttpStatus.BAD_REQUEST,\n      );\n    const currentDate = new Date(Date.now());\n    const expiradeDate = new Date(user.expirationDate);\n\n    if (user.confirmationCode === code && expiradeDate > currentDate)\n      await this.usersModel.update(\n        { confirmationCode: '', isActive: true },\n        { where: { email: user.email } },\n      );\n    else\n      throw new HttpException(\n        'Invalid or expired activation code',\n        HttpStatus.BAD_REQUEST,\n      );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Weather.html":{"url":"classes/Weather.html","title":"class - Weather","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Weather\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/weather/weather.model.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Model\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                additionalText\n                            \n                            \n                                city\n                            \n                            \n                                createdBy\n                            \n                            \n                                date\n                            \n                            \n                                latitude\n                            \n                            \n                                longitude\n                            \n                            \n                                temperature\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        additionalText\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/weather/weather.model.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({allowNull: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/weather/weather.model.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({allowNull: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/weather/weather.model.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({allowNull: false, defaultValue: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/weather/weather.model.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        latitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({allowNull: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/weather/weather.model.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        longitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({allowNull: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/weather/weather.model.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        temperature\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({allowNull: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/weather/weather.model.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Model, Table } from 'sequelize-typescript';\n\n@Table({ tableName: 'weather' })\nexport class Weather extends Model {\n  @Column({ allowNull: false })\n  city: string;\n\n  @Column({ allowNull: false })\n  latitude: number;\n\n  @Column({ allowNull: false })\n  longitude: number;\n\n  @Column({ allowNull: false, defaultValue: Date.now() })\n  date: Date;\n\n  @Column({ allowNull: false })\n  temperature: number;\n\n  @Column({ allowNull: false })\n  createdBy: number;\n\n  @Column({})\n  additionalText: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/WeatherController.html":{"url":"controllers/WeatherController.html","title":"controller - WeatherController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  WeatherController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/weather/weather.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                weather\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addWeather\n                            \n                            \n                                generateNewData\n                            \n                            \n                                getAllWeatherData\n                            \n                            \n                                getWeatherByCity\n                            \n                            \n                                getWeatherByUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addWeather\n                        \n                    \n                \n            \n            \n                \naddWeather(weatherDto: WeatherDto, request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/weather/weather.controller.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    weatherDto\n                                    \n                                                WeatherDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generateNewData\n                        \n                    \n                \n            \n            \n                \ngenerateNewData()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/generate-new-data')\n                \n            \n\n            \n                \n                    Defined in src/weather/weather.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllWeatherData\n                        \n                    \n                \n            \n            \n                \ngetAllWeatherData()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseInterceptors(CacheInterceptor)@Get('')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/weather/weather.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getWeatherByCity\n                        \n                    \n                \n            \n            \n                \ngetWeatherByCity(city)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseInterceptors(CacheInterceptor)@Get('/:city')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/weather/weather.controller.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    city\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getWeatherByUser\n                        \n                    \n                \n            \n            \n                \ngetWeatherByUser(request)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/byUser')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/weather/weather.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { CACHE_MANAGER } from '@nestjs/cache-manager';\nimport {\n  Body,\n  CacheInterceptor,\n  ClassSerializerInterceptor,\n  Controller,\n  Get,\n  Inject,\n  Param,\n  Post,\n  Req,\n  UseGuards,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Cache } from 'cache-manager';\n\nimport { WeatherDto } from './dto/weather.dto';\nimport { WeatherService } from './weather.service';\n\n@Controller('weather')\n@UseInterceptors(ClassSerializerInterceptor)\nexport class WeatherController {\n  constructor(\n    private weatherService: WeatherService,\n    @Inject(CACHE_MANAGER) private cacheManager: Cache,\n  ) {}\n\n  @UseInterceptors(CacheInterceptor)\n  @Get('')\n  @UseGuards(AuthGuard())\n  getAllWeatherData() {\n    return this.weatherService.getAllWeatherData();\n  }\n\n  // manual caching\n  @Get('/byUser')\n  @UseGuards(AuthGuard())\n  getWeatherByUser(@Req() request) {\n    return this.weatherService.getWeatherByUser(request.body.id);\n  }\n\n  @UseInterceptors(CacheInterceptor)\n  @Get('/:city')\n  @UseGuards(AuthGuard())\n  getWeatherByCity(@Param('city') city) {\n    return this.weatherService.getWeatherByCity(city);\n  }\n\n  @Post('')\n  @UseGuards(AuthGuard())\n  addWeather(@Body() weatherDto: WeatherDto, @Req() request) {\n    return this.weatherService.addWeather(weatherDto, request.body.id);\n  }\n\n  @Post('/generate-new-data')\n  generateNewData() {\n    return this.weatherService.generateNewData();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/WeatherDto.html":{"url":"classes/WeatherDto.html","title":"class - WeatherDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  WeatherDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/weather/dto/weather.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                city\n                            \n                            \n                                createdBy\n                            \n                            \n                                date\n                            \n                            \n                                latitude\n                            \n                            \n                                longitude\n                            \n                            \n                                temperature\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/weather/dto/weather.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdBy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/weather/dto/weather.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        date\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                    \n                        \n                                Defined in src/weather/dto/weather.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        latitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/weather/dto/weather.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        longitude\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/weather/dto/weather.dto.ts:4\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        temperature\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/weather/dto/weather.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class WeatherDto {\n  city: string;\n  latitude: number;\n  longitude: number;\n  date: Date;\n  temperature: number;\n  createdBy: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/WeatherModule.html":{"url":"modules/WeatherModule.html","title":"module - WeatherModule","body":"\n                   \n\n\n\n\n    Modules\n    WeatherModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_WeatherModule\n\n\n\ncluster_WeatherModule_providers\n\n\n\ncluster_WeatherModule_imports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nWeatherModule\n\nWeatherModule\n\nWeatherModule -->\n\nUsersModule->WeatherModule\n\n\n\n\n\nWeatherService\n\nWeatherService\n\nWeatherModule -->\n\nWeatherService->WeatherModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/weather/weather.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            WeatherService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            WeatherController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { CacheModule, Module } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { SequelizeModule } from '@nestjs/sequelize';\n\nimport { UsersModule } from '../users/users.module';\nimport { WeatherController } from './weather.controller';\nimport { Weather } from './weather.model';\nimport { WeatherService } from './weather.service';\n\n@Module({\n  controllers: [WeatherController],\n  imports: [UsersModule, SequelizeModule.forFeature([Weather])],\n  providers: [WeatherService, JwtService],\n})\nexport class WeatherModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/WeatherService.html":{"url":"injectables/WeatherService.html","title":"injectable - WeatherService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  WeatherService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/weather/weather.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addWeather\n                            \n                            \n                                generateNewData\n                            \n                            \n                                getAllWeatherData\n                            \n                            \n                                    Async\n                                getWeatherByCity\n                            \n                            \n                                    Async\n                                getWeatherByUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addWeather\n                        \n                    \n                \n            \n            \n                \naddWeather(weatherDto: WeatherDto, id)\n                \n            \n\n\n            \n                \n                    Defined in src/weather/weather.service.ts:76\n                \n            \n\n\n            \n                \n                    A method that add weather data from the current user with a given id. Example:\nWeatherService.addWeather(city, latitude, longitude, date, temperature, createdBy, 1);\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    weatherDto\n                                    \n                                                WeatherDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    id\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        An id of a user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            WeatherService.addWeather(city, latitude, longitude, date, temperature, createdBy, 1);\n                        \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        A promise with the list of weather\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generateNewData\n                        \n                    \n                \n            \n            \n                \ngenerateNewData()\n                \n            \n\n\n            \n                \n                    Defined in src/weather/weather.service.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllWeatherData\n                        \n                    \n                \n            \n            \n                \ngetAllWeatherData()\n                \n            \n\n\n            \n                \n                    Defined in src/weather/weather.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getWeatherByCity\n                        \n                    \n                \n            \n            \n                \n                    \n                    getWeatherByCity(city)\n                \n            \n\n\n            \n                \n                    Defined in src/weather/weather.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    city\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getWeatherByUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getWeatherByUser(id)\n                \n            \n\n\n            \n                \n                    Defined in src/weather/weather.service.ts:54\n                \n            \n\n\n            \n                \n                    A method that fetches weather data from the current user with a given id. Example:\nconst user = await WeatherService.getWeatherByUser(1);\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        An id of a user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                        Example :\n                        \n                            const user = await WeatherService.getWeatherByUser(1);\n                        \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        A promise with the list of weather\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { randomBytes } from 'node:crypto';\n\nimport { CACHE_MANAGER } from '@nestjs/cache-manager';\nimport { Inject, Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/sequelize';\nimport { Cache } from 'cache-manager';\nimport { Op } from 'sequelize';\n\nimport { WeatherDto } from './dto/weather.dto';\nimport { Weather } from './weather.model';\n\n@Injectable()\nexport class WeatherService {\n  /**\n   * @ignore\n   */\n  constructor(\n    @InjectModel(Weather)\n    private weatherModel: typeof Weather,\n    @Inject(CACHE_MANAGER) private cacheManager: Cache,\n  ) {}\n\n  getAllWeatherData() {\n    return this.weatherModel.findAll();\n  }\n\n  async getWeatherByCity(city) {\n    const temp = [5, 15];\n    const find = 'abc';\n    return this.weatherModel.findAll({\n      where: {\n        additionalText: {\n          [Op.like]: `%${find}%`,\n        },\n        city: {\n          [Op.like]: `%${city}%`,\n        },\n        // temperature: {\n        //   [Op.between]: temp,\n        // },\n      },\n    });\n  }\n\n  /**\n   * A method that fetches weather data from the current user with a given id. Example:\n   * @example\n   * const user = await WeatherService.getWeatherByUser(1);\n   * @param id An id of a user\n   * @returns A promise with the list of weather\n   */\n\n  // manual caching\n  async getWeatherByUser(id) {\n    const value = await this.cacheManager.get(id);\n    if (value) return value;\n\n    const data = await this.weatherModel.findAll({\n      where: {\n        createdBy: id,\n      },\n    });\n\n    await this.cacheManager.set(id, data);\n\n    return data;\n  }\n\n  /**\n   * A method that add weather data from the current user with a given id. Example:\n   * @example\n   * WeatherService.addWeather(city, latitude, longitude, date, temperature, createdBy, 1);\n   * @param id An id of a user\n   * @returns A promise with the list of weather\n   */\n  addWeather(weatherDto: WeatherDto, id) {\n    this.weatherModel.create({ ...weatherDto, createdBy: id });\n  }\n\n  generateNewData() {\n    this.weatherModel.create({\n      additionalText: randomBytes(255).toString('hex'),\n      city: randomBytes(6).toString('hex'),\n      createdBy: 6,\n      date: Date.now(),\n      latitude: Math.round(Math.random() * 91 * 1000000) / 1000000,\n      longitude: Math.round(Math.random() * 181 * 1000000) / 1000000,\n      temperature: Math.round(Math.random() * 50),\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/config/app.ts\n            \n            variable\n            env\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dto/user-data.dto.ts\n            \n            class\n            UserDataDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/isActive.middleware.ts\n            \n            injectable\n            IsActiveMiddleware\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/jwt.stategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/users.model.ts\n            \n            class\n            Users\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/weather/dto/weather.dto.ts\n            \n            class\n            WeatherDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/weather/weather.controller.ts\n            \n            controller\n            WeatherController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/weather/weather.model.ts\n            \n            class\n            Weather\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/weather/weather.service.ts\n            \n            injectable\n            WeatherService\n            \n                33 %\n                (2/6)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/cache-manager : ^1.0.0\n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.3.1\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/jwt : ^10.0.2\n        \n            @nestjs/passport : ^9.0.3\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/sequelize : ^9.0.0\n        \n            @types/passport-jwt : ^3.0.8\n        \n            bcrypt : ^5.1.0\n        \n            cache-manager : ^5.2.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.0\n        \n            crypto : ^1.0.1\n        \n            dotenv : ^16.0.3\n        \n            mysql2 : ^3.2.0\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.1\n        \n            pg : ^8.10.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.2.0\n        \n            sequelize : ^6.29.3\n        \n            sequelize-typescript : ^2.1.5\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            UserRole   (src/.../users.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/users/users.model.ts\n    \n        \n            \n                \n                    \n                        \n                        UserRole\n                    \n                \n                        \n                            \n                                 admin\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n                        \n                            \n                                 user\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ yarn install\n\n# migration\nnpx sequelize-cli db:migrateRunning the app\n# development\n$ yarn run start\n\n# watch mode\n$ yarn run start:devTest\n# unit tests\n$ yarn run test\n\n# e2e tests\n$ yarn run test:e2e\n\n# test coverage\n$ yarn run test:cov.ENV\n#Dafault port\nNODE_PORT=\n\n#PostgreSQL\nDB_USER=\nDB_PASSWORD=\nDB_HOST=\nDB_PORT=\nDB_DATABASE=\nDB_DIALECT=\n\n#bcrypt\nSALT=\n\n#JWT\nJWT_LIFETIME=\nJWT_SECRET=Loadtest\n#generate 100 records\nloadtest -n 100 -m POST http://localhost:8083/weather/generate-new-data\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        WeatherModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_WeatherModule\n\n\n\ncluster_WeatherModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nWeatherModule\n\nWeatherModule\n\nWeatherModule -->\n\nUsersModule->WeatherModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nUsersModule->JwtStrategy \n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\nAppModule -->\n\nWeatherModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nUsersModule -->\n\nJwtStrategy->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\nWeatherService\n\nWeatherService\n\nWeatherModule -->\n\nWeatherService->WeatherModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    4 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            env   (src/.../app.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/app.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        env\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
